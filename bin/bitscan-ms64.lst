; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
__rdtsc_ready DD 01H DUP (?)
_BSS	ENDS
divqsection	SEGMENT
__idivq_code DB	048H
	DB	089H
	DB	0c8H
	DB	049H
	DB	0f7H
	DB	0f8H
	DB	049H
	DB	089H
	DB	011H
	DB	0c3H
	ORG $+6
__divq_code DB	048H
	DB	089H
	DB	0c8H
	DB	049H
	DB	0f7H
	DB	0f0H
	DB	049H
	DB	089H
	DB	011H
	DB	0c3H
divqsection	ENDS
CONST	SEGMENT
_is_endianness DD 01020304H
	ORG $+12
?sendl@?1??__decorate_message@@9@9 DB 0aH, 00H		; `__decorate_message'::`2'::sendl
CONST	ENDS
_DATA	SEGMENT
$SG13336 DB	'blk[ -1 ] ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13337 DB	'd:\work\klpmd.mic\-bitscan\types.h(5202): *** FATAL: ', 00H
	ORG $+2
$SG13352 DB	'( void ** )ptr < blk ASSERTION FAILED!!!', 00H
	ORG $+7
$SG13353 DB	'd:\work\klpmd.mic\-bitscan\types.h(5204): *** FATAL: ', 00H
	ORG $+2
$SG13368 DB	'( void ** )ptr + 2 <= blk ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13369 DB	'd:\work\klpmd.mic\-bitscan\types.h(5205): *** FATAL: ', 00H
	ORG $+2
$SG13387 DB	'd:\work\klpmd.mic\-bitscan\types.h(5206): *** FATAL: ', 00H
	ORG $+2
$SG13386 DB	'( unsigned char * )blk + ( size_t )blk[ -2 ] >= ( unsign'
	DB	'ed char * )blk ASSERTION FAILED!!!', 00H
	ORG $+5
$SG13429 DB	'blk[ -1 ] ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13430 DB	'd:\work\klpmd.mic\-bitscan\types.h(5252): *** FATAL: ', 00H
	ORG $+2
$SG13445 DB	'( void ** )ptr < blk ASSERTION FAILED!!!', 00H
	ORG $+7
$SG13446 DB	'd:\work\klpmd.mic\-bitscan\types.h(5255): *** FATAL: ', 00H
	ORG $+2
$SG13461 DB	'( void ** )ptr + 2 <= blk ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13462 DB	'd:\work\klpmd.mic\-bitscan\types.h(5256): *** FATAL: ', 00H
	ORG $+2
$SG13480 DB	'd:\work\klpmd.mic\-bitscan\types.h(5257): *** FATAL: ', 00H
	ORG $+2
$SG13479 DB	'( unsigned char * )blk + ( size_t )blk[ -2 ] >= ( unsign'
	DB	'ed char * )blk ASSERTION FAILED!!!', 00H
	ORG $+5
$SG13514 DB	'off + ssz <= sz ASSERTION FAILED!!!', 00H
	ORG $+4
$SG13515 DB	'd:\work\klpmd.mic\-bitscan\types.h(5285): *** FATAL: ', 00H
	ORG $+2
$SG13532 DB	'WORDSIZE', 00H
	ORG $+7
$SG13533 DB	0aH, '%-12s : %u', 0aH, 00H
	ORG $+3
$SG13534 DB	0aH, 'Input unsigned integer> ', 00H
	ORG $+2
$SG13535 DB	'%llu', 00H
	ORG $+7
$SG13538 DB	0aH, '_BitScanForward( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+6
$SG13541 DB	'_BitScanReverse( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+7
$SG13542 DB	0aH, '_BitScanForward64( %llu ): %u (Success=%u)', 0aH, 00H
	ORG $+3
$SG13543 DB	'_BitScanReverse64( %llu ): %u (Success=%u)', 0aH, 00H
	ORG $+4
divq	DQ	FLAT:__divq_code
idivq	DQ	FLAT:__idivq_code
_DATA	ENDS
PUBLIC	main
EXTRN	__iob_func:PROC
EXTRN	fputs:PROC
EXTRN	printf:PROC
EXTRN	scanf:PROC
pdata	SEGMENT
$pdata$main DD	imagerel $LN4
	DD	imagerel $LN4+190
	DD	imagerel $unwind$main
pdata	ENDS
xdata	SEGMENT
$unwind$main DD	010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\work\klpmd.mic\-bitscan\bitscan.c
_TEXT	SEGMENT
input$ = 48
main	PROC

; 39   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 40   : 	unsigned long long input;
; 41   : 	unsigned result;
; 42   : 	unsigned zf;
; 43   : 
; 44   : 	printf( "\n%-12s : %u\n", "WORDSIZE", ( unsigned )__WORDSIZE );

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG13532
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13533
  00012	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00018	e8 00 00 00 00	 call	 printf

; 45   : #ifdef _IS_ARM
; 46   : 	printf( "%-12s : %u\n", "_IS_ARM", ( unsigned )_IS_ARM );
; 47   : #endif
; 48   : #ifdef _IS_THUMB
; 49   : 	printf( "%-12s : %u\n", "_IS_THUMB", ( unsigned )_IS_THUMB );
; 50   : #endif
; 51   : #ifdef _IS_IN_THUMB
; 52   : 	printf( "%-12s : %u\n", "_IS_IN_THUMB", ( unsigned )_IS_IN_THUMB );
; 53   : #endif
; 54   : #ifdef _IS_ARM64
; 55   : 	printf( "%-12s : %u\n", "_IS_ARM64", ( unsigned )_IS_ARM64 );
; 56   : #endif
; 57   : 
; 58   : 	fputs( "\nInput unsigned integer> ", stdout );

  0001d	e8 00 00 00 00	 call	 __iob_func
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13534
  00029	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  0002d	e8 00 00 00 00	 call	 fputs

; 59   : 	scanf( "%llu", &input );

  00032	48 8d 54 24 30	 lea	 rdx, QWORD PTR input$[rsp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13535
  0003e	e8 00 00 00 00	 call	 scanf

; 60   : 
; 61   : #ifdef _IS_BITSCANF32
; 62   : 	zf = _BSF32( &result, ( unsigned long )input );

  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input$[rsp]
  00048	44 0f bc c1	 bsf	 r8d, ecx

; 63   : 	printf( "\n_BitScanForward( %lu ): %u (Success=%u)\n", ( unsigned long )input, result, zf );

  0004c	8b d1		 mov	 edx, ecx
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13538
  00055	0f 95 c0	 setne	 al
  00058	44 0f b6 c8	 movzx	 r9d, al
  0005c	e8 00 00 00 00	 call	 printf

; 64   : #endif
; 65   : #ifdef _IS_BITSCANR32
; 66   : 	zf = _BSR32( &result, ( unsigned long )input );

  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input$[rsp]
  00066	44 0f bd c1	 bsr	 r8d, ecx

; 67   : 	printf( "_BitScanReverse( %lu ): %u (Success=%u)\n", ( unsigned long )input, result, zf );

  0006a	8b d1		 mov	 edx, ecx
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13541
  00073	0f 95 c0	 setne	 al
  00076	44 0f b6 c8	 movzx	 r9d, al
  0007a	e8 00 00 00 00	 call	 printf

; 68   : #endif
; 69   : #ifdef _IS_BITSCAN64
; 70   : 	zf = _BSF64( &result, input );

  0007f	48 8b 54 24 30	 mov	 rdx, QWORD PTR input$[rsp]

; 71   : 	printf( "\n_BitScanForward64( %llu ): %u (Success=%u)\n", input, result, zf );

  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13542
  0008b	4c 0f bc c2	 bsf	 r8, rdx
  0008f	0f 95 c0	 setne	 al
  00092	44 0f b6 c8	 movzx	 r9d, al
  00096	e8 00 00 00 00	 call	 printf

; 72   : 	zf = _BSR64( &result, input );

  0009b	48 8b 54 24 30	 mov	 rdx, QWORD PTR input$[rsp]

; 73   : 	printf( "_BitScanReverse64( %llu ): %u (Success=%u)\n", input, result, zf );

  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG13543
  000a7	4c 0f bd c2	 bsr	 r8, rdx
  000ab	0f 95 c0	 setne	 al
  000ae	44 0f b6 c8	 movzx	 r9d, al
  000b2	e8 00 00 00 00	 call	 printf

; 74   : #endif
; 75   : 
; 76   : 	return EXIT_SUCCESS;

  000b7	33 c0		 xor	 eax, eax

; 77   : }

  000b9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bd	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
