; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG10219 DB	'WORDSIZE', 00H
	ORG $+7
$SG10220 DB	0aH, '%-12s : %u', 0aH, 00H
	ORG $+3
$SG10221 DB	0aH, 'Input unsigned integer> ', 00H
	ORG $+2
$SG10222 DB	'%llu', 00H
	ORG $+7
$SG10223 DB	0aH, '32-bit input value: %lu', 0aH, 00H
	ORG $+6
$SG10224 DB	'_BitScanForward( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+7
$SG10225 DB	'_BitScanReverse( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+7
$SG10226 DB	0aH, '64-bit input value: %llu', 0aH, 00H
	ORG $+5
$SG10227 DB	'_BitScanForward64( %llu ): %u (Success=%u)', 0aH, 00H
	ORG $+4
$SG10228 DB	'_BitScanReverse64( %llu ): %u (Success=%u)', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vfscanf_l
PUBLIC	scanf
PUBLIC	main
EXTRN	__acrt_iob_func:PROC
EXTRN	fputs:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__stdio_common_vfscanf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfscanf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanf DD	imagerel $LN6
	DD	imagerel $LN6+80
	DD	imagerel $unwind$scanf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN4
	DD	imagerel $LN4+227
	DD	imagerel $unwind$main
pdata	ENDS
xdata	SEGMENT
$unwind$main DD	010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfscanf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\work\bitscan\bitscan\bitscan.c
_TEXT	SEGMENT
input$ = 48
main	PROC

; 38   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 39   : 	unsigned long long input;
; 40   : 	unsigned result;
; 41   : 	unsigned status;
; 42   : 
; 43   : 	printf( "\n%-12s : %u\n", "WORDSIZE", ( unsigned )__WORDSIZE );

  00004	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0000a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG10219
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10220
  00018	e8 00 00 00 00	 call	 printf

; 44   : 
; 45   : #ifdef _IS_ARM
; 46   : 	printf( "%-12s : %u\n", "_IS_ARM", ( unsigned )_IS_ARM );
; 47   : #endif
; 48   : #ifdef _IS_THUMB
; 49   : 	printf( "%-12s : %u\n", "_IS_THUMB", ( unsigned )_IS_THUMB );
; 50   : #endif
; 51   : #ifdef _IS_IN_THUMB
; 52   : 	printf( "%-12s : %u\n", "_IS_IN_THUMB", ( unsigned )_IS_IN_THUMB );
; 53   : #endif
; 54   : #ifdef _IS_ARM64
; 55   : 	printf( "%-12s : %u\n", "_IS_ARM64", ( unsigned )_IS_ARM64 );
; 56   : #endif
; 57   : 
; 58   : 	fputs( "\nInput unsigned integer> ", stdout );

  0001d	b9 01 00 00 00	 mov	 ecx, 1
  00022	e8 00 00 00 00	 call	 __acrt_iob_func
  00027	48 8b d0	 mov	 rdx, rax
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10221
  00031	e8 00 00 00 00	 call	 fputs

; 59   : 	scanf( "%llu", &input );

  00036	48 8d 54 24 30	 lea	 rdx, QWORD PTR input$[rsp]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10222
  00042	e8 00 00 00 00	 call	 scanf

; 60   : 
; 61   : 	printf( "\n32-bit input value: %lu\n", ( unsigned long )( uint32_t )input );

  00047	8b 54 24 30	 mov	 edx, DWORD PTR input$[rsp]
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10223
  00052	e8 00 00 00 00	 call	 printf

; 62   : #ifdef _IS_BITSCANF32
; 63   : 	status = _BSF32( &result, ( uint32_t )input );

  00057	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input$[rsp]
  0005c	44 0f bc c1	 bsf	 r8d, ecx

; 64   : 	printf( "_BitScanForward( %lu ): %u (Success=%u)\n", ( unsigned long )( uint32_t )input, result, status );

  00060	8b d1		 mov	 edx, ecx
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10224
  00069	0f 95 c0	 setne	 al
  0006c	44 0f b6 c8	 movzx	 r9d, al
  00070	e8 00 00 00 00	 call	 printf

; 65   : #endif
; 66   : #ifdef _IS_BITSCANR32
; 67   : 	status = _BSR32( &result, ( uint32_t )input );

  00075	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input$[rsp]
  0007a	44 0f bd c1	 bsr	 r8d, ecx

; 68   : 	printf( "_BitScanReverse( %lu ): %u (Success=%u)\n", ( unsigned long )( uint32_t )input, result, status );

  0007e	8b d1		 mov	 edx, ecx
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10225
  00087	0f 95 c0	 setne	 al
  0008a	44 0f b6 c8	 movzx	 r9d, al
  0008e	e8 00 00 00 00	 call	 printf

; 69   : #endif
; 70   : #ifdef _IS_BITSCAN64
; 71   : 	printf( "\n64-bit input value: %llu\n", input );

  00093	48 8b 54 24 30	 mov	 rdx, QWORD PTR input$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10226
  0009f	e8 00 00 00 00	 call	 printf

; 72   : 	status = _BSF64( &result, input );

  000a4	48 8b 54 24 30	 mov	 rdx, QWORD PTR input$[rsp]

; 73   : 	printf( "_BitScanForward64( %llu ): %u (Success=%u)\n", input, result, status );

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10227
  000b0	4c 0f bc c2	 bsf	 r8, rdx
  000b4	0f 95 c0	 setne	 al
  000b7	44 0f b6 c8	 movzx	 r9d, al
  000bb	e8 00 00 00 00	 call	 printf

; 74   : 	status = _BSR64( &result, input );

  000c0	48 8b 54 24 30	 mov	 rdx, QWORD PTR input$[rsp]

; 75   : 	printf( "_BitScanReverse64( %llu ): %u (Success=%u)\n", input, result, status );

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG10228
  000cc	4c 0f bd c2	 bsr	 r8, rdx
  000d0	0f 95 c0	 setne	 al
  000d3	44 0f b6 c8	 movzx	 r9d, al
  000d7	e8 00 00 00 00	 call	 printf

; 76   : #endif
; 77   : 
; 78   : 	return EXIT_SUCCESS;

  000dc	33 c0		 xor	 eax, eax

; 79   : }

  000de	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e2	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT scanf
_TEXT	SEGMENT
_Format$ = 80
scanf	PROC						; COMDAT

; 1275 :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001b	48 8b f9	 mov	 rdi, rcx

; 1276 :         int _Result;
; 1277 :         va_list _ArgList;
; 1278 :         __crt_va_start(_ArgList, _Format);

  0001e	48 8d 74 24 58	 lea	 rsi, QWORD PTR _Format$[rsp+8]

; 1279 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

  00023	33 c9		 xor	 ecx, ecx
  00025	e8 00 00 00 00	 call	 __acrt_iob_func
  0002a	48 8b d8	 mov	 rbx, rax
  0002d	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  00032	45 33 c9	 xor	 r9d, r9d
  00035	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0003a	4c 8b c7	 mov	 r8, rdi
  0003d	48 8b d3	 mov	 rdx, rbx
  00040	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00043	e8 00 00 00 00	 call	 __stdio_common_vfscanf

; 1280 :         __crt_va_end(_ArgList);
; 1281 :         return _Result;
; 1282 :     }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	5e		 pop	 rsi
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT _vfscanf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfscanf_l PROC						; COMDAT

; 1057 :     {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 8b e9	 mov	 rbp, rcx

; 1058 :         return __stdio_common_vfscanf(

  00020	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  00025	4c 8b cf	 mov	 r9, rdi
  00028	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0002d	4c 8b c6	 mov	 r8, rsi
  00030	48 8b d5	 mov	 rdx, rbp
  00033	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00036	e8 00 00 00 00	 call	 __stdio_common_vfscanf

; 1059 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1060 :             _Stream, _Format, _Locale, _ArgList);
; 1061 :     }

  0003b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00040	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00045	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
_vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT

; 949  :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001b	48 8b f9	 mov	 rdi, rcx

; 950  :         int _Result;
; 951  :         va_list _ArgList;
; 952  :         __crt_va_start(_ArgList, _Format);

  0001e	48 8d 74 24 58	 lea	 rsi, QWORD PTR _Format$[rsp+8]

; 953  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	e8 00 00 00 00	 call	 __acrt_iob_func
  0002d	48 8b d8	 mov	 rbx, rax
  00030	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00035	45 33 c9	 xor	 r9d, r9d
  00038	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0003d	4c 8b c7	 mov	 r8, rdi
  00040	48 8b d3	 mov	 rdx, rbx
  00043	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00046	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 954  :         __crt_va_end(_ArgList);
; 955  :         return _Result;
; 956  :     }

  0004b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 637  :     {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 8b e9	 mov	 rbp, rcx

; 638  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00020	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00025	4c 8b cf	 mov	 r9, rdi
  00028	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0002d	4c 8b c6	 mov	 r8, rsi
  00030	48 8b d5	 mov	 rdx, rbp
  00033	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00036	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 639  :     }

  0003b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00040	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00045	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 95   :         static unsigned __int64 _OptionsStorage;
; 96   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 97   :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
