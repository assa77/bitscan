   1              		.cpu cortex-a7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 23, 1
   4              		.eabi_attribute 24, 1
   5              		.eabi_attribute 25, 1
   6              		.eabi_attribute 26, 2
   7              		.eabi_attribute 30, 2
   8              		.eabi_attribute 34, 1
   9              		.eabi_attribute 18, 4
  10              		.file	"bitscan.c"
  11              		.text
  12              		.section	.text.startup,"ax",%progbits
  13              		.align	2
  14              		.global	main
  15              		.arch armv7ve
  16              		.syntax unified
  17              		.arm
  18              		.fpu neon-vfpv4
  19              		.type	main, %function
  20              	main:
  21              		@ args = 0, pretend = 0, frame = 8
  22              		@ frame_needed = 0, uses_anonymous_args = 0
  23 0000 30402DE9 		push	{r4, r5, lr}
  24 0004 005000E3 		movw	r5, #:lower16:stdout
  25 0008 005040E3 		movt	r5, #:upper16:stdout
  26 000c 000000E3 		movw	r0, #:lower16:.LC0
  27 0010 000040E3 		movt	r0, #:upper16:.LC0
  28 0014 0CD04DE2 		sub	sp, sp, #12
  29 0018 003095E5 		ldr	r3, [r5]
  30 001c 5D20A0E3 		mov	r2, #93
  31 0020 0110A0E3 		mov	r1, #1
  32 0024 004000E3 		movw	r4, #:lower16:.LC2
  33 0028 004040E3 		movt	r4, #:upper16:.LC2
  34 002c FEFFFFEB 		bl	fwrite
  35 0030 001000E3 		movw	r1, #:lower16:.LC1
  36 0034 0400A0E1 		mov	r0, r4
  37 0038 001040E3 		movt	r1, #:upper16:.LC1
  38 003c 2020A0E3 		mov	r2, #32
  39 0040 FEFFFFEB 		bl	printf
  40 0044 001000E3 		movw	r1, #:lower16:.LC3
  41 0048 0400A0E1 		mov	r0, r4
  42 004c 001040E3 		movt	r1, #:upper16:.LC3
  43 0050 0720A0E3 		mov	r2, #7
  44 0054 FEFFFFEB 		bl	printf
  45 0058 001000E3 		movw	r1, #:lower16:.LC4
  46 005c 0400A0E1 		mov	r0, r4
  47 0060 001040E3 		movt	r1, #:upper16:.LC4
  48 0064 0420A0E3 		mov	r2, #4
  49 0068 FEFFFFEB 		bl	printf
  50 006c 001000E3 		movw	r1, #:lower16:.LC5
  51 0070 0400A0E1 		mov	r0, r4
  52 0074 001040E3 		movt	r1, #:upper16:.LC5
  53 0078 0120A0E3 		mov	r2, #1
  54 007c FEFFFFEB 		bl	printf
  55 0080 003095E5 		ldr	r3, [r5]
  56 0084 000000E3 		movw	r0, #:lower16:.LC6
  57 0088 000040E3 		movt	r0, #:upper16:.LC6
  58 008c 1920A0E3 		mov	r2, #25
  59 0090 0110A0E3 		mov	r1, #1
  60 0094 0140A0E1 		mov	r4, r1
  61 0098 FEFFFFEB 		bl	fwrite
  62 009c 000000E3 		movw	r0, #:lower16:.LC7
  63 00a0 0D10A0E1 		mov	r1, sp
  64 00a4 000040E3 		movt	r0, #:upper16:.LC7
  65 00a8 FEFFFFEB 		bl	__isoc99_scanf
  66 00ac 00109DE5 		ldr	r1, [sp]
  67 00b0 000000E3 		movw	r0, #:lower16:.LC8
  68 00b4 000040E3 		movt	r0, #:upper16:.LC8
  69 00b8 FEFFFFEB 		bl	printf
  70 00bc 00C09DE5 		ldr	ip, [sp]
  71 00c0 000000E3 		movw	r0, #:lower16:.LC9
  72 00c4 000040E3 		movt	r0, #:upper16:.LC9
  73 00c8 0430A0E1 		mov	r3, r4
  74 00cc 0C10A0E1 		mov	r1, ip
  75 00d0 1F20A0E3 		mov	r2, #31
  76              		.syntax divided
  77              	@ 1177 "bitscan.h" 1
  78 00d4 1CCF6FE1 		clz	ip,ip
  79 00d8 0C2042E0 		sub	r2,r2,ip
  80 00dc AC3243E0 		sub	r3,r3,ip,lsr #5
  81              	@ 0 "" 2
  82              		.arm
  83              		.syntax unified
  84 00e0 7330EFE6 		uxtb	r3, r3
  85 00e4 FEFFFFEB 		bl	printf
  86 00e8 00209DE5 		ldr	r2, [sp]
  87 00ec 000000E3 		movw	r0, #:lower16:.LC10
  88 00f0 000040E3 		movt	r0, #:upper16:.LC10
  89 00f4 0210A0E1 		mov	r1, r2
  90              		.syntax divided
  91              	@ 1157 "bitscan.h" 1
  92 00f8 322FFFE6 		rbit	r2,r2
  93 00fc 122F6FE1 		clz	r2,r2
  94 0100 A24244E0 		sub	r4,r4,r2,lsr #5
  95              	@ 0 "" 2
  96              		.arm
  97              		.syntax unified
  98 0104 7430EFE6 		uxtb	r3, r4
  99 0108 FEFFFFEB 		bl	printf
 100 010c 0000A0E3 		mov	r0, #0
 101 0110 0CD08DE2 		add	sp, sp, #12
 102              		@ sp needed
 103 0114 3080BDE8 		pop	{r4, r5, pc}
 104              		.size	main, .-main
 105              		.section	.rodata.str1.4,"aMS",%progbits,1
 106              		.align	2
 107              	.LC0:
 108 0000 0A426974 		.ascii	"\012BitScan - Copyright (c) 2019 by Alexander M. Al"
 108      5363616E 
 108      202D2043 
 108      6F707972 
 108      69676874 
 109 0030 62657274 		.ascii	"bertian <assa@4ip.ru>.\012All rights reserved.\012\012"
 109      69616E20 
 109      3C617373 
 109      61403469 
 109      702E7275 
 110 005d 00       		.ascii	"\000"
 111 005e 0000     		.space	2
 112              	.LC1:
 113 0060 5F5F574F 		.ascii	"__WORDSIZE\000"
 113      52445349 
 113      5A4500
 114 006b 00       		.space	1
 115              	.LC2:
 116 006c 252D3132 		.ascii	"%-12s : %lu\012\000"
 116      73203A20 
 116      256C750A 
 116      00
 117 0079 000000   		.space	3
 118              	.LC3:
 119 007c 5F49535F 		.ascii	"_IS_ARM\000"
 119      41524D00 
 120              	.LC4:
 121 0084 5F49535F 		.ascii	"_IS_THUMB\000"
 121      5448554D 
 121      4200
 122 008e 0000     		.space	2
 123              	.LC5:
 124 0090 5F49535F 		.ascii	"_IS_NEON\000"
 124      4E454F4E 
 124      00
 125 0099 000000   		.space	3
 126              	.LC6:
 127 009c 0A496E70 		.ascii	"\012Input unsigned integer> \000"
 127      75742075 
 127      6E736967 
 127      6E656420 
 127      696E7465 
 128 00b6 0000     		.space	2
 129              	.LC7:
 130 00b8 256C6C75 		.ascii	"%llu\000"
 130      00
 131 00bd 000000   		.space	3
 132              	.LC8:
 133 00c0 0A33322D 		.ascii	"\01232-bit input value: %lu\012\000"
 133      62697420 
 133      696E7075 
 133      74207661 
 133      6C75653A 
 134 00da 0000     		.space	2
 135              	.LC9:
 136 00dc 5F425352 		.ascii	"_BSR32( %lu ): %u (Success=%u)\012\000"
 136      33322820 
 136      256C7520 
 136      293A2025 
 136      75202853 
 137              	.LC10:
 138 00fc 5F425346 		.ascii	"_BSF32( %lu ): %u (Success=%u)\012\000"
 138      33322820 
 138      256C7520 
 138      293A2025 
 138      75202853 
 139              		.ident	"GCC: (Raspbian 8.3.0-6+rpi1) 8.3.0"
 140              		.section	.note.GNU-stack,"",%progbits
