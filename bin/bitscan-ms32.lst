; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\WORK\klpmd.mic\-bitscan\bitscan.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
___rdtsc_ready DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
__is_endianness DD 01020304H
	ORG $+12
?sendl@?1??__decorate_message@@9@9 DB 0aH, 00H		; `__decorate_message'::`2'::sendl
CONST	ENDS
_DATA	SEGMENT
$SG13324 DB	'( unsigned char * )blk + ( size_t )blk[ -2 ] >= ( unsign'
	DB	'ed char * )blk ASSERTION FAILED!!!', 00H
	ORG $+1
$SG13325 DB	'd:\work\klpmd.mic\-bitscan\types.h(5257): *** FATAL: ', 00H
	ORG $+2
$SG13359 DB	'off + ssz <= sz ASSERTION FAILED!!!', 00H
$SG13360 DB	'd:\work\klpmd.mic\-bitscan\types.h(5285): *** FATAL: ', 00H
	ORG $+2
$SG13377 DB	'WORDSIZE', 00H
	ORG $+3
$SG13378 DB	0aH, '%-12s : %u', 0aH, 00H
	ORG $+3
$SG13379 DB	0aH, 'Input unsigned integer> ', 00H
	ORG $+2
$SG13380 DB	'%llu', 00H
	ORG $+3
$SG13383 DB	0aH, '_BitScanForward( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+2
$SG13386 DB	'_BitScanReverse( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+3
$SG13181 DB	'blk[ -1 ] ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13182 DB	'd:\work\klpmd.mic\-bitscan\types.h(5202): *** FATAL: ', 00H
	ORG $+2
$SG13197 DB	'( void ** )ptr < blk ASSERTION FAILED!!!', 00H
	ORG $+3
$SG13198 DB	'd:\work\klpmd.mic\-bitscan\types.h(5204): *** FATAL: ', 00H
	ORG $+2
$SG13213 DB	'( void ** )ptr + 2 <= blk ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13214 DB	'd:\work\klpmd.mic\-bitscan\types.h(5205): *** FATAL: ', 00H
	ORG $+6
$SG13231 DB	'( unsigned char * )blk + ( size_t )blk[ -2 ] >= ( unsign'
	DB	'ed char * )blk ASSERTION FAILED!!!', 00H
	ORG $+1
$SG13232 DB	'd:\work\klpmd.mic\-bitscan\types.h(5206): *** FATAL: ', 00H
	ORG $+2
$SG13274 DB	'blk[ -1 ] ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13275 DB	'd:\work\klpmd.mic\-bitscan\types.h(5252): *** FATAL: ', 00H
	ORG $+2
$SG13290 DB	'( void ** )ptr < blk ASSERTION FAILED!!!', 00H
	ORG $+3
$SG13291 DB	'd:\work\klpmd.mic\-bitscan\types.h(5255): *** FATAL: ', 00H
	ORG $+2
$SG13306 DB	'( void ** )ptr + 2 <= blk ASSERTION FAILED!!!', 00H
	ORG $+2
$SG13307 DB	'd:\work\klpmd.mic\-bitscan\types.h(5256): *** FATAL: ', 00H
_DATA	ENDS
PUBLIC	_main
EXTRN	___iob_func:PROC
EXTRN	_fputs:PROC
EXTRN	_printf:PROC
EXTRN	_scanf:PROC
; Function compile flags: /Ogtpy
; File d:\work\klpmd.mic\-bitscan\bitscan.c
_TEXT	SEGMENT
_result$ = -12						; size = 4
_input$ = -8						; size = 8
_main	PROC

; 39   : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 40   : 	unsigned long long input;
; 41   : 	unsigned result;
; 42   : 	unsigned zf;
; 43   : 
; 44   : 	printf( "\n%-12s : %u\n", "WORDSIZE", ( unsigned )__WORDSIZE );

  00003	6a 20		 push	 32			; 00000020H
  00005	68 00 00 00 00	 push	 OFFSET $SG13377
  0000a	68 00 00 00 00	 push	 OFFSET $SG13378
  0000f	e8 00 00 00 00	 call	 _printf

; 45   : #ifdef _IS_ARM
; 46   : 	printf( "%-12s : %u\n", "_IS_ARM", ( unsigned )_IS_ARM );
; 47   : #endif
; 48   : #ifdef _IS_THUMB
; 49   : 	printf( "%-12s : %u\n", "_IS_THUMB", ( unsigned )_IS_THUMB );
; 50   : #endif
; 51   : #ifdef _IS_IN_THUMB
; 52   : 	printf( "%-12s : %u\n", "_IS_IN_THUMB", ( unsigned )_IS_IN_THUMB );
; 53   : #endif
; 54   : #ifdef _IS_ARM64
; 55   : 	printf( "%-12s : %u\n", "_IS_ARM64", ( unsigned )_IS_ARM64 );
; 56   : #endif
; 57   : 
; 58   : 	fputs( "\nInput unsigned integer> ", stdout );

  00014	e8 00 00 00 00	 call	 ___iob_func
  00019	83 c0 20	 add	 eax, 32			; 00000020H
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET $SG13379
  00022	e8 00 00 00 00	 call	 _fputs

; 59   : 	scanf( "%llu", &input );

  00027	8d 44 24 18	 lea	 eax, DWORD PTR _input$[esp+32]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET $SG13380
  00031	e8 00 00 00 00	 call	 _scanf

; 60   : 
; 61   : #ifdef _IS_BITSCANF32
; 62   : 	zf = _BSF32( &result, ( unsigned long )input );

  00036	8b 4c 24 20	 mov	 ecx, DWORD PTR _input$[esp+40]
  0003a	0f bc c1	 bsf	 eax, ecx
  0003d	89 44 24 1c	 mov	 DWORD PTR _result$[esp+40], eax
  00041	0f 95 c0	 setne	 al
  00044	0f b6 c0	 movzx	 eax, al

; 63   : 	printf( "\n_BitScanForward( %lu ): %u (Success=%u)\n", ( unsigned long )input, result, zf );

  00047	50		 push	 eax
  00048	ff 74 24 20	 push	 DWORD PTR _result$[esp+44]
  0004c	51		 push	 ecx
  0004d	68 00 00 00 00	 push	 OFFSET $SG13383
  00052	e8 00 00 00 00	 call	 _printf

; 64   : #endif
; 65   : #ifdef _IS_BITSCANR32
; 66   : 	zf = _BSR32( &result, ( unsigned long )input );

  00057	8b 4c 24 30	 mov	 ecx, DWORD PTR _input$[esp+56]
  0005b	0f bd c1	 bsr	 eax, ecx
  0005e	89 44 24 2c	 mov	 DWORD PTR _result$[esp+56], eax
  00062	0f 95 c0	 setne	 al
  00065	0f b6 c0	 movzx	 eax, al

; 67   : 	printf( "_BitScanReverse( %lu ): %u (Success=%u)\n", ( unsigned long )input, result, zf );

  00068	50		 push	 eax
  00069	ff 74 24 30	 push	 DWORD PTR _result$[esp+60]
  0006d	51		 push	 ecx
  0006e	68 00 00 00 00	 push	 OFFSET $SG13386
  00073	e8 00 00 00 00	 call	 _printf

; 68   : #endif
; 69   : #ifdef _IS_BITSCAN64
; 70   : 	zf = _BSF64( &result, input );
; 71   : 	printf( "\n_BitScanForward64( %llu ): %u (Success=%u)\n", input, result, zf );
; 72   : 	zf = _BSR64( &result, input );
; 73   : 	printf( "_BitScanReverse64( %llu ): %u (Success=%u)\n", input, result, zf );
; 74   : #endif
; 75   : 
; 76   : 	return EXIT_SUCCESS;

  00078	33 c0		 xor	 eax, eax

; 77   : }

  0007a	83 c4 48	 add	 esp, 72			; 00000048H
  0007d	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
END
