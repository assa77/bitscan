; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\WORK\bitscan\bitscan\bitscan.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG10824 DB	'WORDSIZE', 00H
	ORG $+3
$SG10825 DB	0aH, '%-12s : %u', 0aH, 00H
	ORG $+3
$SG10826 DB	0aH, 'Input unsigned integer> ', 00H
	ORG $+2
$SG10827 DB	'%llu', 00H
	ORG $+3
$SG10828 DB	0aH, '32-bit input value: %lu', 0aH, 00H
	ORG $+2
$SG10829 DB	'_BitScanForward( %lu ): %u (Success=%u)', 0aH, 00H
	ORG $+3
$SG10830 DB	'_BitScanReverse( %lu ): %u (Success=%u)', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	_fputs:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vfscanf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Ogtpy
; File d:\work\bitscan\bitscan\bitscan.c
_TEXT	SEGMENT
_result$ = -12						; size = 4
_input$ = -8						; size = 8
_main	PROC

; 38   : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 39   : 	unsigned long long input;
; 40   : 	unsigned result;
; 41   : 	unsigned status;
; 42   : 
; 43   : 	printf( "\n%-12s : %u\n", "WORDSIZE", ( unsigned )__WORDSIZE );

  00003	6a 20		 push	 32			; 00000020H
  00005	68 00 00 00 00	 push	 OFFSET $SG10824
  0000a	68 00 00 00 00	 push	 OFFSET $SG10825
  0000f	e8 00 00 00 00	 call	 _printf

; 44   : 
; 45   : #ifdef _IS_ARM
; 46   : 	printf( "%-12s : %u\n", "_IS_ARM", ( unsigned )_IS_ARM );
; 47   : #endif
; 48   : #ifdef _IS_THUMB
; 49   : 	printf( "%-12s : %u\n", "_IS_THUMB", ( unsigned )_IS_THUMB );
; 50   : #endif
; 51   : #ifdef _IS_IN_THUMB
; 52   : 	printf( "%-12s : %u\n", "_IS_IN_THUMB", ( unsigned )_IS_IN_THUMB );
; 53   : #endif
; 54   : #ifdef _IS_ARM64
; 55   : 	printf( "%-12s : %u\n", "_IS_ARM64", ( unsigned )_IS_ARM64 );
; 56   : #endif
; 57   : 
; 58   : 	fputs( "\nInput unsigned integer> ", stdout );

  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET $SG10826
  00021	e8 00 00 00 00	 call	 _fputs

; 59   : 	scanf( "%llu", &input );

  00026	8d 44 24 1c	 lea	 eax, DWORD PTR _input$[esp+36]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET $SG10827
  00030	e8 00 00 00 00	 call	 _scanf

; 60   : 
; 61   : 	printf( "\n32-bit input value: %lu\n", ( unsigned long )( uint32_t )input );

  00035	ff 74 24 24	 push	 DWORD PTR _input$[esp+44]
  00039	68 00 00 00 00	 push	 OFFSET $SG10828
  0003e	e8 00 00 00 00	 call	 _printf

; 62   : #ifdef _IS_BITSCANF32
; 63   : 	status = _BSF32( &result, ( uint32_t )input );

  00043	8b 4c 24 2c	 mov	 ecx, DWORD PTR _input$[esp+52]
  00047	0f bc c1	 bsf	 eax, ecx
  0004a	89 44 24 28	 mov	 DWORD PTR _result$[esp+52], eax
  0004e	0f 95 c0	 setne	 al
  00051	0f b6 c0	 movzx	 eax, al

; 64   : 	printf( "_BitScanForward( %lu ): %u (Success=%u)\n", ( unsigned long )( uint32_t )input, result, status );

  00054	50		 push	 eax
  00055	ff 74 24 2c	 push	 DWORD PTR _result$[esp+56]
  00059	51		 push	 ecx
  0005a	68 00 00 00 00	 push	 OFFSET $SG10829
  0005f	e8 00 00 00 00	 call	 _printf

; 65   : #endif
; 66   : #ifdef _IS_BITSCANR32
; 67   : 	status = _BSR32( &result, ( uint32_t )input );

  00064	8b 4c 24 3c	 mov	 ecx, DWORD PTR _input$[esp+68]
  00068	0f bd c1	 bsr	 eax, ecx
  0006b	89 44 24 38	 mov	 DWORD PTR _result$[esp+68], eax
  0006f	0f 95 c0	 setne	 al
  00072	0f b6 c0	 movzx	 eax, al

; 68   : 	printf( "_BitScanReverse( %lu ): %u (Success=%u)\n", ( unsigned long )( uint32_t )input, result, status );

  00075	50		 push	 eax
  00076	ff 74 24 3c	 push	 DWORD PTR _result$[esp+72]
  0007a	51		 push	 ecx
  0007b	68 00 00 00 00	 push	 OFFSET $SG10830
  00080	e8 00 00 00 00	 call	 _printf
  00085	83 c4 48	 add	 esp, 72			; 00000048H

; 69   : #endif
; 70   : #ifdef _IS_BITSCAN64
; 71   : 	printf( "\n64-bit input value: %llu\n", input );
; 72   : 	status = _BSF64( &result, input );
; 73   : 	printf( "_BitScanForward64( %llu ): %u (Success=%u)\n", input, result, status );
; 74   : 	status = _BSR64( &result, input );
; 75   : 	printf( "_BitScanReverse64( %llu ): %u (Success=%u)\n", input, result, status );
; 76   : #endif
; 77   : 
; 78   : 	return EXIT_SUCCESS;

  00088	33 c0		 xor	 eax, eax

; 79   : }

  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT _scanf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT

; 1275 :     {

  00000	56		 push	 esi

; 1276 :         int _Result;
; 1277 :         va_list _ArgList;
; 1278 :         __crt_va_start(_ArgList, _Format);
; 1279 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Format$[esp]
  00005	6a 00		 push	 0
  00007	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000c	83 c4 04	 add	 esp, 4
  0000f	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Format$[esp+4]
  00013	51		 push	 ecx
  00014	6a 00		 push	 0
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001d	ff 70 04	 push	 DWORD PTR [eax+4]
  00020	ff 30		 push	 DWORD PTR [eax]
  00022	e8 00 00 00 00	 call	 ___stdio_common_vfscanf
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	5e		 pop	 esi

; 1280 :         __crt_va_end(_ArgList);
; 1281 :         return _Result;
; 1282 :     }

  0002b	c3		 ret	 0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1058 :         return __stdio_common_vfscanf(

  00000	ff 74 24 10	 push	 DWORD PTR __ArgList$[esp-4]
  00004	ff 74 24 10	 push	 DWORD PTR __Locale$[esp]
  00008	ff 74 24 10	 push	 DWORD PTR __Format$[esp+4]
  0000c	ff 74 24 10	 push	 DWORD PTR __Stream$[esp+8]
  00010	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00015	ff 70 04	 push	 DWORD PTR [eax+4]
  00018	ff 30		 push	 DWORD PTR [eax]
  0001a	e8 00 00 00 00	 call	 ___stdio_common_vfscanf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 1059 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1060 :             _Stream, _Format, _Locale, _ArgList);
; 1061 :     }

  00022	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 949  :     {

  00000	56		 push	 esi

; 950  :         int _Result;
; 951  :         va_list _ArgList;
; 952  :         __crt_va_start(_ArgList, _Format);
; 953  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Format$[esp]
  00005	6a 01		 push	 1
  00007	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000c	83 c4 04	 add	 esp, 4
  0000f	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Format$[esp+4]
  00013	51		 push	 ecx
  00014	6a 00		 push	 0
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001d	ff 70 04	 push	 DWORD PTR [eax+4]
  00020	ff 30		 push	 DWORD PTR [eax]
  00022	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	5e		 pop	 esi

; 954  :         __crt_va_end(_ArgList);
; 955  :         return _Result;
; 956  :     }

  0002b	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00000	ff 74 24 10	 push	 DWORD PTR __ArgList$[esp-4]
  00004	ff 74 24 10	 push	 DWORD PTR __Locale$[esp]
  00008	ff 74 24 10	 push	 DWORD PTR __Format$[esp+4]
  0000c	ff 74 24 10	 push	 DWORD PTR __Stream$[esp+8]
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	ff 70 04	 push	 DWORD PTR [eax+4]
  00018	ff 30		 push	 DWORD PTR [eax]
  0001a	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 639  :     }

  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 95   :         static unsigned __int64 _OptionsStorage;
; 96   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 97   :     }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.14393.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
