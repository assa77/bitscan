   1              		.cpu cortex-a53
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"bitscan.c"
  13              		.text
  14              		.section	.text.startup,"ax",%progbits
  15              		.align	1
  16              		.p2align 2,,3
  17              		.global	main
  18              		.arch armv8-a
  19              		.arch_extension crc
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu neon-fp-armv8
  24              		.type	main, %function
  25              	main:
  26              		@ args = 0, pretend = 0, frame = 8
  27              		@ frame_needed = 0, uses_anonymous_args = 0
  28 0000 30B5     		push	{r4, r5, lr}
  29 0002 2022     		movs	r2, #32
  30 0004 2749     		ldr	r1, .L4
  31 0006 2848     		ldr	r0, .L4+4
  32 0008 83B0     		sub	sp, sp, #12
  33              	.LPIC0:
  34 000a 7944     		add	r1, pc
  35 000c 274D     		ldr	r5, .L4+8
  36              	.LPIC1:
  37 000e 7844     		add	r0, pc
  38 0010 0124     		movs	r4, #1
  39 0012 FFF7FEFF 		bl	printf(PLT)
  40 0016 2649     		ldr	r1, .L4+12
  41              	.LPIC3:
  42 0018 7D44     		add	r5, pc
  43 001a 0822     		movs	r2, #8
  44 001c 2846     		mov	r0, r5
  45              	.LPIC2:
  46 001e 7944     		add	r1, pc
  47 0020 FFF7FEFF 		bl	printf(PLT)
  48 0024 2349     		ldr	r1, .L4+16
  49 0026 2846     		mov	r0, r5
  50 0028 0822     		movs	r2, #8
  51              	.LPIC4:
  52 002a 7944     		add	r1, pc
  53 002c FFF7FEFF 		bl	printf(PLT)
  54 0030 2149     		ldr	r1, .L4+20
  55 0032 2246     		mov	r2, r4
  56 0034 2846     		mov	r0, r5
  57              	.LPIC6:
  58 0036 7944     		add	r1, pc
  59 0038 204D     		ldr	r5, .L4+24
  60 003a FFF7FEFF 		bl	printf(PLT)
  61 003e 204B     		ldr	r3, .L4+28
  62 0040 2048     		ldr	r0, .L4+32
  63 0042 1922     		movs	r2, #25
  64              	.LPIC8:
  65 0044 7B44     		add	r3, pc
  66 0046 2146     		mov	r1, r4
  67              	.LPIC9:
  68 0048 7844     		add	r0, pc
  69 004a 5B59     		ldr	r3, [r3, r5]
  70 004c 1B68     		ldr	r3, [r3]
  71 004e FFF7FEFF 		bl	fwrite(PLT)
  72 0052 1D48     		ldr	r0, .L4+36
  73 0054 6946     		mov	r1, sp
  74              	.LPIC10:
  75 0056 7844     		add	r0, pc
  76 0058 FFF7FEFF 		bl	__isoc99_scanf(PLT)
  77 005c 1B48     		ldr	r0, .L4+40
  78 005e 0099     		ldr	r1, [sp]
  79              	.LPIC11:
  80 0060 7844     		add	r0, pc
  81 0062 FFF7FEFF 		bl	printf(PLT)
  82 0066 1A48     		ldr	r0, .L4+44
  83 0068 0099     		ldr	r1, [sp]
  84 006a 2346     		mov	r3, r4
  85              	.LPIC12:
  86 006c 7844     		add	r0, pc
  87              		.syntax unified
  88              	@ 557 "bitscan.h" 1
  89 006e 91FAA1F2 		rbit	r2,r1
  90 0072 B2FA82F2 		clz	r2,r2
  91 0076 A3EB5213 		sub	r3,r3,r2,lsr #5
  92              	@ 0 "" 2
  93              		.thumb
  94              		.syntax unified
  95 007a DBB2     		uxtb	r3, r3
  96 007c FFF7FEFF 		bl	printf(PLT)
  97 0080 0099     		ldr	r1, [sp]
  98 0082 1448     		ldr	r0, .L4+48
  99 0084 2346     		mov	r3, r4
 100 0086 1F22     		movs	r2, #31
 101 0088 0C46     		mov	r4, r1
 102              	.LPIC13:
 103 008a 7844     		add	r0, pc
 104              		.syntax unified
 105              	@ 594 "bitscan.h" 1
 106 008c B4FA84F4 		clz	r4,r4
 107 0090 A2EB0402 		sub	r2,r2,r4
 108 0094 A3EB5413 		sub	r3,r3,r4,lsr #5
 109              	@ 0 "" 2
 110              		.thumb
 111              		.syntax unified
 112 0098 DBB2     		uxtb	r3, r3
 113 009a FFF7FEFF 		bl	printf(PLT)
 114 009e 0020     		movs	r0, #0
 115 00a0 03B0     		add	sp, sp, #12
 116              		@ sp needed
 117 00a2 30BD     		pop	{r4, r5, pc}
 118              	.L5:
 119              		.align	2
 120              	.L4:
 121 00a4 96000000 		.word	.LC0-(.LPIC0+4)
 122 00a8 96000000 		.word	.LC1-(.LPIC1+4)
 123 00ac 90000000 		.word	.LC3-(.LPIC3+4)
 124 00b0 8E000000 		.word	.LC2-(.LPIC2+4)
 125 00b4 86000000 		.word	.LC4-(.LPIC4+4)
 126 00b8 7E000000 		.word	.LC5-(.LPIC6+4)
 127 00bc 00000000 		.word	stdout(GOT)
 128 00c0 78000000 		.word	_GLOBAL_OFFSET_TABLE_-(.LPIC8+4)
 129 00c4 78000000 		.word	.LC6-(.LPIC9+4)
 130 00c8 6E000000 		.word	.LC7-(.LPIC10+4)
 131 00cc 68000000 		.word	.LC8-(.LPIC11+4)
 132 00d0 60000000 		.word	.LC9-(.LPIC12+4)
 133 00d4 46000000 		.word	.LC10-(.LPIC13+4)
 134              		.size	main, .-main
 135              		.section	.rodata.str1.4,"aMS",%progbits,1
 136              		.align	2
 137              	.LC0:
 138 0000 574F5244 		.ascii	"WORDSIZE\000"
 138      53495A45 
 138      00
 139 0009 000000   		.space	3
 140              	.LC1:
 141 000c 0A252D31 		.ascii	"\012%-12s : %u\012\000"
 141      3273203A 
 141      2025750A 
 141      00
 142 0019 000000   		.space	3
 143              	.LC2:
 144 001c 5F49535F 		.ascii	"_IS_ARM\000"
 144      41524D00 
 145              	.LC3:
 146 0024 252D3132 		.ascii	"%-12s : %u\012\000"
 146      73203A20 
 146      25750A00 
 147              	.LC4:
 148 0030 5F49535F 		.ascii	"_IS_THUMB\000"
 148      5448554D 
 148      4200
 149 003a 0000     		.space	2
 150              	.LC5:
 151 003c 5F49535F 		.ascii	"_IS_IN_THUMB\000"
 151      494E5F54 
 151      48554D42 
 151      00
 152 0049 000000   		.space	3
 153              	.LC6:
 154 004c 0A496E70 		.ascii	"\012Input unsigned integer> \000"
 154      75742075 
 154      6E736967 
 154      6E656420 
 154      696E7465 
 155 0066 0000     		.space	2
 156              	.LC7:
 157 0068 256C6C75 		.ascii	"%llu\000"
 157      00
 158 006d 000000   		.space	3
 159              	.LC8:
 160 0070 0A33322D 		.ascii	"\01232-bit input value: %lu\012\000"
 160      62697420 
 160      696E7075 
 160      74207661 
 160      6C75653A 
 161 008a 0000     		.space	2
 162              	.LC9:
 163 008c 5F426974 		.ascii	"_BitScanForward( %lu ): %u (Success=%u)\012\000"
 163      5363616E 
 163      466F7277 
 163      61726428 
 163      20256C75 
 164 00b5 000000   		.space	3
 165              	.LC10:
 166 00b8 5F426974 		.ascii	"_BitScanReverse( %lu ): %u (Success=%u)\012\000"
 166      5363616E 
 166      52657665 
 166      72736528 
 166      20256C75 
 167              		.ident	"GCC: (Debian 8.3.0-2) 8.3.0"
 168              		.section	.note.GNU-stack,"",%progbits
