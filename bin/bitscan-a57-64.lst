   1              		.arch armv8-a
   2              		.file	"bitscan.c"
   3              		.text
   4              		.section	.text.startup,"ax",@progbits
   5              		.align	2
   6              		.p2align 4,,15
   7              		.global	main
   8              		.type	main, %function
   9              	main:
  10              	.LFB26:
  11              		.cfi_startproc
  12 0000 01000090 		adrp	x1, .LC0
  13 0004 00000090 		adrp	x0, .LC1
  14 0008 FD7BBDA9 		stp	x29, x30, [sp, -48]!
  15              		.cfi_def_cfa_offset 48
  16              		.cfi_offset 29, -48
  17              		.cfi_offset 30, -40
  18 000c 21000091 		add	x1, x1, :lo12:.LC0
  19 0010 FD030091 		mov	x29, sp
  20 0014 02088052 		mov	w2, 64
  21 0018 00000091 		add	x0, x0, :lo12:.LC1
  22 001c F35301A9 		stp	x19, x20, [sp, 16]
  23              		.cfi_offset 19, -32
  24              		.cfi_offset 20, -24
  25 0020 14000090 		adrp	x20, .LC3
  26 0024 94020091 		add	x20, x20, :lo12:.LC3
  27 0028 33008052 		mov	w19, 1
  28 002c 00000094 		bl	printf
  29 0030 01000090 		adrp	x1, .LC2
  30 0034 E00314AA 		mov	x0, x20
  31 0038 21000091 		add	x1, x1, :lo12:.LC2
  32 003c 02018052 		mov	w2, 8
  33 0040 00000094 		bl	printf
  34 0044 01000090 		adrp	x1, .LC4
  35 0048 E00314AA 		mov	x0, x20
  36 004c 21000091 		add	x1, x1, :lo12:.LC4
  37 0050 02018052 		mov	w2, 8
  38 0054 00000094 		bl	printf
  39 0058 01000090 		adrp	x1, .LC5
  40 005c E203132A 		mov	w2, w19
  41 0060 E00314AA 		mov	x0, x20
  42 0064 21000091 		add	x1, x1, :lo12:.LC5
  43 0068 00000094 		bl	printf
  44 006c 03000090 		adrp	x3, :got:stdout
  45 0070 00000090 		adrp	x0, .LC6
  46 0074 630040F9 		ldr	x3, [x3, #:got_lo12:stdout]
  47 0078 220380D2 		mov	x2, 25
  48 007c 210080D2 		mov	x1, 1
  49 0080 00000091 		add	x0, x0, :lo12:.LC6
  50 0084 630040F9 		ldr	x3, [x3]
  51 0088 00000094 		bl	fwrite
  52 008c 00000090 		adrp	x0, .LC7
  53 0090 E1A30091 		add	x1, sp, 40
  54 0094 00000091 		add	x0, x0, :lo12:.LC7
  55 0098 00000094 		bl	__isoc99_scanf
  56 009c E12B40B9 		ldr	w1, [sp, 40]
  57 00a0 00000090 		adrp	x0, .LC8
  58 00a4 00000091 		add	x0, x0, :lo12:.LC8
  59 00a8 00000094 		bl	printf
  60 00ac E11740F9 		ldr	x1, [sp, 40]
  61 00b0 00000090 		adrp	x0, .LC9
  62 00b4 E303132A 		mov	w3, w19
  63 00b8 00000091 		add	x0, x0, :lo12:.LC9
  64              	#APP
  65              	// 457 "bitscan.h" 1
  66 00bc 2200C05A 		rbit	w2,w1
  67 00c0 4210C05A 		clz	w2,w2
  68 00c4 6314424B 		sub	w3,w3,w2,lsr #5
  69              	// 0 "" 2
  70              	#NO_APP
  71 00c8 631C0012 		and	w3, w3, 255
  72 00cc E103012A 		uxtw	x1, w1
  73 00d0 00000094 		bl	printf
  74 00d4 E11740F9 		ldr	x1, [sp, 40]
  75 00d8 00000090 		adrp	x0, .LC10
  76 00dc E303132A 		mov	w3, w19
  77 00e0 E2038052 		mov	w2, 31
  78 00e4 00000091 		add	x0, x0, :lo12:.LC10
  79 00e8 E403012A 		mov	w4, w1
  80 00ec E103012A 		uxtw	x1, w1
  81              	#APP
  82              	// 489 "bitscan.h" 1
  83 00f0 8410C05A 		clz	w4,w4
  84 00f4 4200044B 		sub	w2,w2,w4
  85 00f8 6314444B 		sub	w3,w3,w4,lsr #5
  86              	// 0 "" 2
  87              	#NO_APP
  88 00fc 631C0012 		and	w3, w3, 255
  89 0100 00000094 		bl	printf
  90 0104 00000090 		adrp	x0, .LC11
  91 0108 00000091 		add	x0, x0, :lo12:.LC11
  92 010c E11740F9 		ldr	x1, [sp, 40]
  93 0110 00000094 		bl	printf
  94 0114 00000090 		adrp	x0, .LC12
  95 0118 E303132A 		mov	w3, w19
  96 011c E11740F9 		ldr	x1, [sp, 40]
  97 0120 00000091 		add	x0, x0, :lo12:.LC12
  98              	#APP
  99              	// 473 "bitscan.h" 1
 100 0124 2200C0DA 		rbit	x2,x1
 101 0128 4210C0DA 		clz	x2,x2
 102 012c 631842CB 		sub	x3,x3,x2,lsr #6
 103              	// 0 "" 2
 104              	#NO_APP
 105 0130 631C0012 		and	w3, w3, 255
 106 0134 00000094 		bl	printf
 107 0138 E41740F9 		ldr	x4, [sp, 40]
 108 013c E2078052 		mov	w2, 63
 109 0140 00000090 		adrp	x0, .LC13
 110 0144 00000091 		add	x0, x0, :lo12:.LC13
 111 0148 E10304AA 		mov	x1, x4
 112              	#APP
 113              	// 505 "bitscan.h" 1
 114 014c 8410C0DA 		clz	x4,x4
 115 0150 420004CB 		sub	x2,x2,x4
 116 0154 731A44CB 		sub	x19,x19,x4,lsr #6
 117              	// 0 "" 2
 118              	#NO_APP
 119 0158 631E0012 		and	w3, w19, 255
 120 015c 00000094 		bl	printf
 121 0160 00008052 		mov	w0, 0
 122 0164 F35341A9 		ldp	x19, x20, [sp, 16]
 123 0168 FD7BC3A8 		ldp	x29, x30, [sp], 48
 124              		.cfi_restore 30
 125              		.cfi_restore 29
 126              		.cfi_restore 19
 127              		.cfi_restore 20
 128              		.cfi_def_cfa_offset 0
 129 016c C0035FD6 		ret
 130              		.cfi_endproc
 131              	.LFE26:
 132              		.size	main, .-main
 133              		.section	.rodata.str1.8,"aMS",@progbits,1
 134              		.align	3
 135              	.LC0:
 136 0000 574F5244 		.string	"WORDSIZE"
 136      53495A45 
 136      00
 137 0009 00000000 		.zero	7
 137      000000
 138              	.LC1:
 139 0010 0A252D31 		.string	"\n%-12s : %u\n"
 139      3273203A 
 139      2025750A 
 139      00
 140 001d 000000   		.zero	3
 141              	.LC2:
 142 0020 5F49535F 		.string	"_IS_ARM"
 142      41524D00 
 143              	.LC3:
 144 0028 252D3132 		.string	"%-12s : %u\n"
 144      73203A20 
 144      25750A00 
 145 0034 00000000 		.zero	4
 146              	.LC4:
 147 0038 5F49535F 		.string	"_IS_THUMB"
 147      5448554D 
 147      4200
 148 0042 00000000 		.zero	6
 148      0000
 149              	.LC5:
 150 0048 5F49535F 		.string	"_IS_ARM64"
 150      41524D36 
 150      3400
 151 0052 00000000 		.zero	6
 151      0000
 152              	.LC6:
 153 0058 0A496E70 		.string	"\nInput unsigned integer> "
 153      75742075 
 153      6E736967 
 153      6E656420 
 153      696E7465 
 154 0072 00000000 		.zero	6
 154      0000
 155              	.LC7:
 156 0078 256C6C75 		.string	"%llu"
 156      00
 157 007d 000000   		.zero	3
 158              	.LC8:
 159 0080 0A33322D 		.string	"\n32-bit input value: %lu\n"
 159      62697420 
 159      696E7075 
 159      74207661 
 159      6C75653A 
 160 009a 00000000 		.zero	6
 160      0000
 161              	.LC9:
 162 00a0 5F426974 		.string	"_BitScanForward( %lu ): %u (Success=%u)\n"
 162      5363616E 
 162      466F7277 
 162      61726428 
 162      20256C75 
 163 00c9 00000000 		.zero	7
 163      000000
 164              	.LC10:
 165 00d0 5F426974 		.string	"_BitScanReverse( %lu ): %u (Success=%u)\n"
 165      5363616E 
 165      52657665 
 165      72736528 
 165      20256C75 
 166 00f9 00000000 		.zero	7
 166      000000
 167              	.LC11:
 168 0100 0A36342D 		.string	"\n64-bit input value: %llu\n"
 168      62697420 
 168      696E7075 
 168      74207661 
 168      6C75653A 
 169 011b 00000000 		.zero	5
 169      00
 170              	.LC12:
 171 0120 5F426974 		.string	"_BitScanForward64( %llu ): %u (Success=%u)\n"
 171      5363616E 
 171      466F7277 
 171      61726436 
 171      34282025 
 172 014c 00000000 		.zero	4
 173              	.LC13:
 174 0150 5F426974 		.string	"_BitScanReverse64( %llu ): %u (Success=%u)\n"
 174      5363616E 
 174      52657665 
 174      72736536 
 174      34282025 
 175              		.ident	"GCC: (Debian 8.3.0-6) 8.3.0"
 176              		.section	.note.GNU-stack,"",@progbits
